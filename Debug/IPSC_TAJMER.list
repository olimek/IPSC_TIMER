
IPSC_TAJMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003164  08003164  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08003164  08003164  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003164  08003164  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200000cc  08003238  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003238  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fc0  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9a  00000000  00000000  000270b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00028e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00029658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034c4  00000000  00000000  00029de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a48b  00000000  00000000  0002d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000415fa  00000000  00000000  0003772f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00078d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a3c  00000000  00000000  00078d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029c0 	.word	0x080029c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	080029c0 	.word	0x080029c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	2207      	movs	r2, #7
 8000404:	4393      	bics	r3, r2
 8000406:	001a      	movs	r2, r3
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	431a      	orrs	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	615a      	str	r2, [r3, #20]
}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b002      	add	sp, #8
 8000416:	bd80      	pop	{r7, pc}

08000418 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	2204      	movs	r2, #4
 8000428:	4393      	bics	r3, r2
 800042a:	001a      	movs	r2, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	431a      	orrs	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	60da      	str	r2, [r3, #12]
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}

0800043c <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	035b      	lsls	r3, r3, #13
 800044e:	0b5b      	lsrs	r3, r3, #13
 8000450:	431a      	orrs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <LL_AHB1_GRP1_EnableClock+0x28>)
 800046a:	6959      	ldr	r1, [r3, #20]
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <LL_AHB1_GRP1_EnableClock+0x28>)
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000

0800048c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <LL_APB1_GRP2_EnableClock+0x28>)
 8000496:	6999      	ldr	r1, [r3, #24]
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <LL_APB1_GRP2_EnableClock+0x28>)
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	430a      	orrs	r2, r1
 800049e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <LL_APB1_GRP2_EnableClock+0x28>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	4013      	ands	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b004      	add	sp, #16
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b090      	sub	sp, #64	; 0x40
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80004be:	2530      	movs	r5, #48	; 0x30
 80004c0:	197b      	adds	r3, r7, r5
 80004c2:	0018      	movs	r0, r3
 80004c4:	2310      	movs	r3, #16
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f002 fa31 	bl	8002930 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80004ce:	241c      	movs	r4, #28
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2314      	movs	r3, #20
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 fa29 	bl	8002930 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2318      	movs	r3, #24
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f002 fa22 	bl	8002930 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ffcb 	bl	800048c <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	029b      	lsls	r3, r3, #10
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ffb0 	bl	8000460 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	02db      	lsls	r3, r3, #11
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ffab 	bl	8000460 <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  PA4   ------> ADC_IN4
  PB1   ------> ADC_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2203      	movs	r2, #3
 8000514:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	1d3a      	adds	r2, r7, #4
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f001 ffb8 	bl	800249a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_MIC_NG_Pin;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2210      	movs	r2, #16
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2203      	movs	r2, #3
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ADC_MIC_NG_GPIO_Port, &GPIO_InitStruct);
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	2390      	movs	r3, #144	; 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f001 ffa8 	bl	800249a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MIC_IN_Pin;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2202      	movs	r2, #2
 800054e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2203      	movs	r2, #3
 8000554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MIC_IN_GPIO_Port, &GPIO_InitStruct);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <MX_ADC_Init+0x144>)
 8000560:	0019      	movs	r1, r3
 8000562:	0010      	movs	r0, r2
 8000564:	f001 ff99 	bl	800249a <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000568:	4a25      	ldr	r2, [pc, #148]	; (8000600 <MX_ADC_Init+0x148>)
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <MX_ADC_Init+0x14c>)
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff ff64 	bl	800043c <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_4);
 8000574:	4a24      	ldr	r2, [pc, #144]	; (8000608 <MX_ADC_Init+0x150>)
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <MX_ADC_Init+0x14c>)
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ff5e 	bl	800043c <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_9);
 8000580:	4a22      	ldr	r2, [pc, #136]	; (800060c <MX_ADC_Init+0x154>)
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <MX_ADC_Init+0x14c>)
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff58 	bl	800043c <LL_ADC_REG_SetSequencerChAdd>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 800058c:	0029      	movs	r1, r5
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	4a16      	ldr	r2, [pc, #88]	; (8000604 <MX_ADC_Init+0x14c>)
 80005aa:	0019      	movs	r1, r3
 80005ac:	0010      	movs	r0, r2
 80005ae:	f001 fe53 	bl	8002258 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <MX_ADC_Init+0x14c>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f001 fe73 	bl	80022c4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_ADC_Init+0x14c>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ff18 	bl	8000418 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_ADC_Init+0x14c>)
 80005ea:	2103      	movs	r1, #3
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff01 	bl	80003f4 <LL_ADC_SetSamplingTimeCommonChannels>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b010      	add	sp, #64	; 0x40
 80005f8:	bdb0      	pop	{r4, r5, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	48000400 	.word	0x48000400
 8000600:	04000002 	.word	0x04000002
 8000604:	40012400 	.word	0x40012400
 8000608:	10000010 	.word	0x10000010
 800060c:	24000200 	.word	0x24000200

08000610 <LL_AHB1_GRP1_EnableClock>:
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <LL_AHB1_GRP1_EnableClock+0x28>)
 800061a:	6959      	ldr	r1, [r3, #20]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LL_AHB1_GRP1_EnableClock+0x28>)
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4013      	ands	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	619a      	str	r2, [r3, #24]
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}

08000654 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	003b      	movs	r3, r7
 8000674:	0018      	movs	r0, r3
 8000676:	2318      	movs	r3, #24
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f002 f958 	bl	8002930 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	03db      	lsls	r3, r3, #15
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ffc3 	bl	8000610 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	029b      	lsls	r3, r3, #10
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff ffbe 	bl	8000610 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	031b      	lsls	r3, r3, #12
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ffb9 	bl	8000610 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	02db      	lsls	r3, r3, #11
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ffb4 	bl	8000610 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(POWER_ALL_GPIO_Port, POWER_ALL_Pin);
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2101      	movs	r1, #1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ffc4 	bl	800063c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MIC_SHDN_GPIO_Port, MIC_SHDN_Pin);
 80006b4:	4bdc      	ldr	r3, [pc, #880]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80006b6:	2104      	movs	r1, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ffbf 	bl	800063c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MIC_GAIN_GPIO_Port, MIC_GAIN_Pin);
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4ad9      	ldr	r2, [pc, #868]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80006c4:	0019      	movs	r1, r3
 80006c6:	0010      	movs	r0, r2
 80006c8:	f7ff ffb8 	bl	800063c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(lcd_bl_GPIO_Port, lcd_bl_Pin);
 80006cc:	2390      	movs	r3, #144	; 0x90
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ffbe 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_4);
 80006d8:	4bd4      	ldr	r3, [pc, #848]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 80006da:	2110      	movs	r1, #16
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ffb9 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_5);
 80006e2:	4bd2      	ldr	r3, [pc, #840]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff ffb4 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80006ec:	4bce      	ldr	r3, [pc, #824]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80006ee:	2101      	movs	r1, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ffaf 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MIC_A_R_GPIO_Port, MIC_A_R_Pin);
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4acb      	ldr	r2, [pc, #812]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f7ff ffa8 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	01db      	lsls	r3, r3, #7
 8000708:	4ac7      	ldr	r2, [pc, #796]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 800070a:	0019      	movs	r1, r3
 800070c:	0010      	movs	r0, r2
 800070e:	f7ff ffa1 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	4ac4      	ldr	r2, [pc, #784]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f7ff ff9a 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000720:	4bc2      	ldr	r3, [pc, #776]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff95 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EEPROM_WC_GPIO_Port, EEPROM_WC_Pin);
 800072a:	4bbf      	ldr	r3, [pc, #764]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 800072c:	2120      	movs	r1, #32
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ff90 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = POWER_ALL_Pin;
 8000734:	003b      	movs	r3, r7
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800073a:	003b      	movs	r3, r7
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(POWER_ALL_GPIO_Port, &GPIO_InitStruct);
 8000752:	003a      	movs	r2, r7
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fe9d 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_CS_Pin;
 8000760:	003b      	movs	r3, r7
 8000762:	2204      	movs	r2, #4
 8000764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800076c:	003b      	movs	r3, r7
 800076e:	2202      	movs	r2, #2
 8000770:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USB_CS_GPIO_Port, &GPIO_InitStruct);
 8000772:	003a      	movs	r2, r7
 8000774:	2390      	movs	r3, #144	; 0x90
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fe8d 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = lcd_bl_Pin;
 8000780:	003b      	movs	r3, r7
 8000782:	2240      	movs	r2, #64	; 0x40
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000786:	003b      	movs	r3, r7
 8000788:	2201      	movs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800078c:	003b      	movs	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000792:	003b      	movs	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000798:	003b      	movs	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(lcd_bl_GPIO_Port, &GPIO_InitStruct);
 800079e:	003a      	movs	r2, r7
 80007a0:	2390      	movs	r3, #144	; 0x90
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fe77 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2210      	movs	r2, #16
 80007b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2201      	movs	r2, #1
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	003b      	movs	r3, r7
 80007cc:	4a97      	ldr	r2, [pc, #604]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 80007ce:	0019      	movs	r1, r3
 80007d0:	0010      	movs	r0, r2
 80007d2:	f001 fe62 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2220      	movs	r2, #32
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007dc:	003b      	movs	r3, r7
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	003b      	movs	r3, r7
 80007f6:	4a8d      	ldr	r2, [pc, #564]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f001 fe4d 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000800:	003b      	movs	r3, r7
 8000802:	2201      	movs	r2, #1
 8000804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000806:	003b      	movs	r3, r7
 8000808:	2201      	movs	r2, #1
 800080a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800080c:	003b      	movs	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000812:	003b      	movs	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000818:	003b      	movs	r3, r7
 800081a:	2201      	movs	r2, #1
 800081c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	003b      	movs	r3, r7
 8000820:	4a81      	ldr	r2, [pc, #516]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f001 fe38 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MIC_SHDN_Pin;
 800082a:	003b      	movs	r3, r7
 800082c:	2204      	movs	r2, #4
 800082e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000830:	003b      	movs	r3, r7
 8000832:	2201      	movs	r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000836:	003b      	movs	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800083c:	003b      	movs	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000842:	003b      	movs	r3, r7
 8000844:	2201      	movs	r2, #1
 8000846:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MIC_SHDN_GPIO_Port, &GPIO_InitStruct);
 8000848:	003b      	movs	r3, r7
 800084a:	4a77      	ldr	r2, [pc, #476]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f001 fe23 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MIC_GAIN_Pin;
 8000854:	003b      	movs	r3, r7
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800085c:	003b      	movs	r3, r7
 800085e:	2201      	movs	r2, #1
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800086e:	003b      	movs	r3, r7
 8000870:	2201      	movs	r2, #1
 8000872:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MIC_GAIN_GPIO_Port, &GPIO_InitStruct);
 8000874:	003b      	movs	r3, r7
 8000876:	4a6c      	ldr	r2, [pc, #432]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f001 fe0d 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MIC_A_R_Pin;
 8000880:	003b      	movs	r3, r7
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000888:	003b      	movs	r3, r7
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MIC_A_R_GPIO_Port, &GPIO_InitStruct);
 80008a0:	003b      	movs	r3, r7
 80008a2:	4a61      	ldr	r2, [pc, #388]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f001 fdf7 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	01d2      	lsls	r2, r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2201      	movs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ba:	003b      	movs	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008c0:	003b      	movs	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c6:	003b      	movs	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	003b      	movs	r3, r7
 80008ce:	4a56      	ldr	r2, [pc, #344]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80008d0:	0019      	movs	r1, r3
 80008d2:	0010      	movs	r0, r2
 80008d4:	f001 fde1 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 80008d8:	003b      	movs	r3, r7
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0212      	lsls	r2, r2, #8
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2201      	movs	r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80008f8:	003b      	movs	r3, r7
 80008fa:	4a4b      	ldr	r2, [pc, #300]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 80008fc:	0019      	movs	r1, r3
 80008fe:	0010      	movs	r0, r2
 8000900:	f001 fdcb 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000904:	003b      	movs	r3, r7
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800090a:	003b      	movs	r3, r7
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000910:	003b      	movs	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000916:	003b      	movs	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800091c:	003b      	movs	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000922:	003b      	movs	r3, r7
 8000924:	4a41      	ldr	r2, [pc, #260]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f001 fdb6 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800092e:	003b      	movs	r3, r7
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0052      	lsls	r2, r2, #1
 8000934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000936:	003b      	movs	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800093c:	003b      	movs	r3, r7
 800093e:	2201      	movs	r2, #1
 8000940:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	003b      	movs	r3, r7
 8000944:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 8000946:	0019      	movs	r1, r3
 8000948:	0010      	movs	r0, r2
 800094a:	f001 fda6 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800094e:	003b      	movs	r3, r7
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000956:	003b      	movs	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800095c:	003b      	movs	r3, r7
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	003b      	movs	r3, r7
 8000964:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <MX_GPIO_Init+0x3c0>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f001 fd96 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800096e:	003b      	movs	r3, r7
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000976:	003b      	movs	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800097c:	003b      	movs	r3, r7
 800097e:	2201      	movs	r2, #1
 8000980:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	003a      	movs	r2, r7
 8000984:	2390      	movs	r3, #144	; 0x90
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fd85 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000990:	003b      	movs	r3, r7
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000998:	003b      	movs	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800099e:	003b      	movs	r3, r7
 80009a0:	2201      	movs	r2, #1
 80009a2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	003a      	movs	r2, r7
 80009a6:	2390      	movs	r3, #144	; 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fd74 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80009b2:	003b      	movs	r3, r7
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	00d2      	lsls	r2, r2, #3
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009ba:	003b      	movs	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009c0:	003b      	movs	r3, r7
 80009c2:	2201      	movs	r2, #1
 80009c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	003a      	movs	r2, r7
 80009c8:	2390      	movs	r3, #144	; 0x90
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 fd63 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80009d4:	003b      	movs	r3, r7
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2201      	movs	r2, #1
 80009e6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	003a      	movs	r2, r7
 80009ea:	2390      	movs	r3, #144	; 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fd52 	bl	800249a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EEPROM_WC_Pin;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2220      	movs	r2, #32
 80009fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009fc:	003b      	movs	r3, r7
 80009fe:	2201      	movs	r2, #1
 8000a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a02:	003b      	movs	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(EEPROM_WC_GPIO_Port, &GPIO_InitStruct);
 8000a14:	003b      	movs	r3, r7
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <MX_GPIO_Init+0x3bc>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f001 fd3d 	bl	800249a <LL_GPIO_Init>

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b006      	add	sp, #24
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	48000800 	.word	0x48000800

08000a30 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <LL_I2C_EnableClockStretching+0x1c>)
 8000a3e:	401a      	ands	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	fffdffff 	.word	0xfffdffff

08000a50 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <LL_I2C_DisableGeneralCall+0x1c>)
 8000a5e:	401a      	ands	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	fff7ffff 	.word	0xfff7ffff

08000a70 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <LL_I2C_SetOwnAddress2+0x28>)
 8000a82:	401a      	ands	r2, r3
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	60da      	str	r2, [r3, #12]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b004      	add	sp, #16
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	fffff801 	.word	0xfffff801

08000a9c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000aaa:	401a      	ands	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	ffff7fff 	.word	0xffff7fff

08000abc <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0492      	lsls	r2, r2, #18
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	605a      	str	r2, [r3, #4]
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <LL_AHB1_GRP1_EnableClock>:
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ae6:	6959      	ldr	r1, [r3, #20]
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4013      	ands	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b004      	add	sp, #16
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000

08000b08 <LL_APB1_GRP1_EnableClock>:
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b12:	69d9      	ldr	r1, [r3, #28]
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b08f      	sub	sp, #60	; 0x3c
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000b3a:	241c      	movs	r4, #28
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	231c      	movs	r3, #28
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f001 fef3 	bl	8002930 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2318      	movs	r3, #24
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f001 feec 	bl	8002930 <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	02db      	lsls	r3, r3, #11
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ffbd 	bl	8000adc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2240      	movs	r2, #64	; 0x40
 8000b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2203      	movs	r2, #3
 8000b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2201      	movs	r2, #1
 8000b78:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2201      	movs	r2, #1
 8000b84:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <MX_I2C1_Init+0x104>)
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	f001 fc84 	bl	800249a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2201      	movs	r2, #1
 8000bae:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <MX_I2C1_Init+0x104>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	0010      	movs	r0, r2
 8000bbe:	f001 fc6c 	bl	800249a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	039b      	lsls	r3, r3, #14
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ff9e 	bl	8000b08 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_I2C1_Init+0x108>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff ff64 	bl	8000a9c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_I2C1_Init+0x108>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ff3a 	bl	8000a50 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_I2C1_Init+0x108>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff26 	bl	8000a30 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000be4:	0021      	movs	r1, r4
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x0000020B;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <MX_I2C1_Init+0x10c>)
 8000bf0:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <MX_I2C1_Init+0x108>)
 8000c14:	0019      	movs	r1, r3
 8000c16:	0010      	movs	r0, r2
 8000c18:	f001 fd38 	bl	800268c <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_I2C1_Init+0x108>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ff4c 	bl	8000abc <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <MX_I2C1_Init+0x108>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff20 	bl	8000a70 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00f      	add	sp, #60	; 0x3c
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	0000020b 	.word	0x0000020b

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b7f      	cmp	r3, #127	; 0x7f
 8000c58:	d828      	bhi.n	8000cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	33c0      	adds	r3, #192	; 0xc0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	589b      	ldr	r3, [r3, r2]
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0011      	movs	r1, r2
 8000c70:	2203      	movs	r2, #3
 8000c72:	400a      	ands	r2, r1
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	401a      	ands	r2, r3
 8000c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	401a      	ands	r2, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2303      	movs	r3, #3
 8000c92:	4003      	ands	r3, r0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	481f      	ldr	r0, [pc, #124]	; (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	33c0      	adds	r3, #192	; 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000caa:	e031      	b.n	8000d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3306      	adds	r3, #6
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1dfa      	adds	r2, r7, #7
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	0011      	movs	r1, r2
 8000ccc:	2203      	movs	r2, #3
 8000cce:	400a      	ands	r2, r1
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	21ff      	movs	r1, #255	; 0xff
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	43d2      	mvns	r2, r2
 8000cda:	401a      	ands	r2, r3
 8000cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	2303      	movs	r3, #3
 8000cee:	4003      	ands	r3, r0
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001c      	movs	r4, r3
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4023      	ands	r3, r4
 8000d00:	3b08      	subs	r3, #8
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	430a      	orrs	r2, r1
 8000d06:	3306      	adds	r3, #6
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	18c3      	adds	r3, r0, r3
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b003      	add	sp, #12
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	045b      	lsls	r3, r3, #17
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d301      	bcc.n	8000d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d34:	2301      	movs	r3, #1
 8000d36:	e010      	b.n	8000d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SysTick_Config+0x44>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d40:	2301      	movs	r3, #1
 8000d42:	425b      	negs	r3, r3
 8000d44:	2103      	movs	r1, #3
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff7c 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x44>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x44>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <LL_RCC_HSE_Enable+0x18>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <LL_RCC_HSE_Enable+0x18>)
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0249      	lsls	r1, r1, #9
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <LL_RCC_HSE_IsReady+0x20>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <LL_RCC_HSE_IsReady+0x24>)
 8000d94:	4694      	mov	ip, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	425a      	negs	r2, r3
 8000d9a:	4153      	adcs	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	fffe0000 	.word	0xfffe0000

08000dac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <LL_RCC_HSI_Enable+0x18>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <LL_RCC_HSI_Enable+0x18>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <LL_RCC_HSI_IsReady+0x1c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	3b02      	subs	r3, #2
 8000dd6:	425a      	negs	r2, r3
 8000dd8:	4153      	adcs	r3, r2
 8000dda:	b2db      	uxtb	r3, r3
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000

08000de8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	22f8      	movs	r2, #248	; 0xf8
 8000df6:	4393      	bics	r3, r2
 8000df8:	0019      	movs	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	00da      	lsls	r2, r3, #3
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000

08000e10 <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <LL_RCC_HSI14_Enable+0x18>)
 8000e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <LL_RCC_HSI14_Enable+0x18>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <LL_RCC_HSI14_IsReady+0x1c>)
 8000e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e34:	2202      	movs	r2, #2
 8000e36:	4013      	ands	r3, r2
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	425a      	negs	r2, r3
 8000e3c:	4153      	adcs	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8000e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8000e56:	2104      	movs	r1, #4
 8000e58:	438a      	bics	r2, r1
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40021000 	.word	0x40021000

08000e68 <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 8000e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e74:	22f8      	movs	r2, #248	; 0xf8
 8000e76:	4393      	bics	r3, r2
 8000e78:	0019      	movs	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	00da      	lsls	r2, r3, #3
 8000e7e:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 8000e80:	430a      	orrs	r2, r1
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_RCC_SetSysClkSource+0x24>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4393      	bics	r3, r2
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <LL_RCC_SetSysClkSource+0x24>)
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	605a      	str	r2, [r3, #4]
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <LL_RCC_GetSysClkSource+0x14>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4013      	ands	r3, r2
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	22f0      	movs	r2, #240	; 0xf0
 8000ede:	4393      	bics	r3, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	0019      	movs	r1, r3
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	605a      	str	r2, [r3, #4]
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	fffff8ff 	.word	0xfffff8ff

08000f24 <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <LL_RCC_SetI2CClockSource+0x24>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	2210      	movs	r2, #16
 8000f32:	4393      	bics	r3, r2
 8000f34:	0019      	movs	r1, r3
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <LL_RCC_SetI2CClockSource+0x24>)
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <LL_RCC_PLL_Enable+0x18>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <LL_RCC_PLL_Enable+0x18>)
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	0449      	lsls	r1, r1, #17
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000

08000f68 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <LL_RCC_PLL_IsReady+0x24>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	049b      	lsls	r3, r3, #18
 8000f74:	4013      	ands	r3, r2
 8000f76:	22fe      	movs	r2, #254	; 0xfe
 8000f78:	0612      	lsls	r2, r2, #24
 8000f7a:	4694      	mov	ip, r2
 8000f7c:	4463      	add	r3, ip
 8000f7e:	425a      	negs	r2, r3
 8000f80:	4153      	adcs	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	401a      	ands	r2, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	220f      	movs	r2, #15
 8000fbc:	4393      	bics	r3, r2
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	ffc2ffff 	.word	0xffc2ffff

08000fdc <LL_APB1_GRP1_EnableClock>:
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <LL_APB1_GRP1_EnableClock+0x28>)
 8000fe6:	69d9      	ldr	r1, [r3, #28]
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LL_APB1_GRP1_EnableClock+0x28>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <LL_APB1_GRP2_EnableClock>:
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <LL_APB1_GRP2_EnableClock+0x28>)
 8001012:	6999      	ldr	r1, [r3, #24]
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LL_APB1_GRP2_EnableClock+0x28>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	430a      	orrs	r2, r1
 800101a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <LL_APB1_GRP2_EnableClock+0x28>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4013      	ands	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000

08001034 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <LL_FLASH_SetLatency+0x24>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	4393      	bics	r3, r2
 8001044:	0019      	movs	r1, r3
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <LL_FLASH_SetLatency+0x24>)
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40022000 	.word	0x40022000

0800105c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <LL_FLASH_GetLatency+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	4013      	ands	r3, r2
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40022000 	.word	0x40022000

08001074 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2240      	movs	r2, #64	; 0x40
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ffb7 	bl	8001008 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	055b      	lsls	r3, r3, #21
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff9c 	bl	8000fdc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f870 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff fae0 	bl	800066c <MX_GPIO_Init>
  MX_ADC_Init();
 80010ac:	f7ff fa04 	bl	80004b8 <MX_ADC_Init>
  MX_SPI1_Init();
 80010b0:	f000 fe9a 	bl	8001de8 <MX_SPI1_Init>
  MX_I2C1_Init();
 80010b4:	f7ff fd3e 	bl	8000b34 <MX_I2C1_Init>
  MX_TIM6_Init();
 80010b8:	f001 f808 	bl	80020cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	SysTick_Config(SystemCoreClock / 1000);
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <main+0xe4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	22fa      	movs	r2, #250	; 0xfa
 80010c2:	0091      	lsls	r1, r2, #2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff f81f 	bl	8000108 <__udivsi3>
 80010ca:	0003      	movs	r3, r0
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff fe27 	bl	8000d20 <SysTick_Config>

	LL_SPI_Enable(SPI1);
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <main+0xe8>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff ffcd 	bl	8001074 <LL_SPI_Enable>

	LCD_init();
 80010da:	f000 fbf1 	bl	80018c0 <LCD_init>
	LCD_BL_ON
 80010de:	2390      	movs	r3, #144	; 0x90
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	2390      	movs	r3, #144	; 0x90
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	438a      	bics	r2, r1
 80010ec:	615a      	str	r2, [r3, #20]
	;


	LCD_print("Elo mordo", 0, 0);
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <main+0xec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fce3 	bl	8001ac0 <LCD_print>
	Delay_ms(1000);
 80010fa:	23fa      	movs	r3, #250	; 0xfa
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 ff40 	bl	8001f84 <Delay_ms>
	ADC1->CR = ADC_CR_ADCAL;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <main+0xf0>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	0612      	lsls	r2, r2, #24
 800110a:	609a      	str	r2, [r3, #8]
	while (ADC1->CR & ADC_CR_ADCAL)
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <main+0xf0>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dbfb      	blt.n	800110e <main+0x7e>
		;

	ADC1->CFGR1 = ADC_CFGR1_OVRMOD;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <main+0xf0>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	0152      	lsls	r2, r2, #5
 800111c:	60da      	str	r2, [r3, #12]
	ADC1->CFGR2 = ADC_CFGR2_CKMODE_1;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <main+0xf0>)
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0612      	lsls	r2, r2, #24
 8001124:	611a      	str	r2, [r3, #16]
	ADC1->SMPR = ADC_SMPR_SMP;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <main+0xf0>)
 8001128:	2207      	movs	r2, #7
 800112a:	615a      	str	r2, [r3, #20]
	ADC1->CHSELR = ADC_CHSELR_CHSEL16;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <main+0xf0>)
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	0252      	lsls	r2, r2, #9
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
	ADC->CCR = ADC_CCR_VREFEN | ADC_CCR_TSEN;
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <main+0xf4>)
 8001136:	22c0      	movs	r2, #192	; 0xc0
 8001138:	0412      	lsls	r2, r2, #16
 800113a:	601a      	str	r2, [r3, #0]
	ADC1->CR = ADC_CR_ADEN;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <main+0xf0>)
 800113e:	2201      	movs	r2, #1
 8001140:	609a      	str	r2, [r3, #8]
	LCD_clrScr();
 8001142:	f000 fd07 	bl	8001b54 <LCD_clrScr>


	while (!(ADC1->ISR & 1))
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <main+0xf0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	4013      	ands	r3, r2
 8001150:	d0fa      	beq.n	8001148 <main+0xb8>
		;


	menu_refresh();
 8001152:	f000 f949 	bl	80013e8 <menu_refresh>
		//if( BUTTON_START/*||BUTTON_3||BUTTON_START||BUTTON_STOP ||BUTTON_1) {BUZZ_ON;}
		//	else {BUZZ_OFF;}
		/*
		 if(BUTTON_MAIN ) {last_shoot = 0; last_shootG = 0;}*/
		//if(BUTTON_MAIN ) LL_GPIO_ResetOutputPin(POWER_ALL_GPIO_Port, POWER_ALL_Pin);
		 key_next_press();
 8001156:	f000 f9c1 	bl	80014dc <key_next_press>
		 key_prev_press();
 800115a:	f000 f9f9 	bl	8001550 <key_prev_press>
		 key_esc_press();
 800115e:	f000 fa75 	bl	800164c <key_esc_press>
		 key_ok_press();
 8001162:	f000 fa2f 	bl	80015c4 <key_ok_press>
		 key_start_press();
 8001166:	f000 faf9 	bl	800175c <key_start_press>
		 key_stop_press();
 800116a:	f000 fab3 	bl	80016d4 <key_stop_press>

		 menu_refresh();
 800116e:	f000 f93b 	bl	80013e8 <menu_refresh>
		 key_next_press();
 8001172:	e7f0      	b.n	8001156 <main+0xc6>
 8001174:	200000c8 	.word	0x200000c8
 8001178:	40013000 	.word	0x40013000
 800117c:	080029d8 	.word	0x080029d8
 8001180:	40012400 	.word	0x40012400
 8001184:	40012708 	.word	0x40012708

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ff51 	bl	8001034 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	f7ff ff62 	bl	800105c <LL_FLASH_GetLatency>
 8001198:	0003      	movs	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d1fa      	bne.n	8001194 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800119e:	f7ff fde3 	bl	8000d68 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	f7ff fdee 	bl	8000d84 <LL_RCC_HSE_IsReady>
 80011a8:	0003      	movs	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d1fa      	bne.n	80011a4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_Enable();
 80011ae:	f7ff fdfd 	bl	8000dac <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	f7ff fe08 	bl	8000dc8 <LL_RCC_HSI_IsReady>
 80011b8:	0003      	movs	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d1fa      	bne.n	80011b4 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80011be:	2010      	movs	r0, #16
 80011c0:	f7ff fe12 	bl	8000de8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI14_Enable();
 80011c4:	f7ff fe24 	bl	8000e10 <LL_RCC_HSI14_Enable>

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	f7ff fe2f 	bl	8000e2c <LL_RCC_HSI14_IsReady>
 80011ce:	0003      	movs	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d1fa      	bne.n	80011ca <SystemClock_Config+0x42>
  {

  }
  LL_RCC_HSI14_SetCalibTrimming(16);
 80011d4:	2010      	movs	r0, #16
 80011d6:	f7ff fe47 	bl	8000e68 <LL_RCC_HSI14_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	02da      	lsls	r2, r3, #11
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff fed3 	bl	8000f90 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80011ea:	f7ff feaf 	bl	8000f4c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	f7ff feba 	bl	8000f68 <LL_RCC_PLL_IsReady>
 80011f4:	0003      	movs	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d1fa      	bne.n	80011f0 <SystemClock_Config+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fe68 	bl	8000ed0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fe79 	bl	8000ef8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001206:	2002      	movs	r0, #2
 8001208:	f7ff fe42 	bl	8000e90 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	f7ff fe53 	bl	8000eb8 <LL_RCC_GetSysClkSource>
 8001212:	0003      	movs	r3, r0
 8001214:	2b08      	cmp	r3, #8
 8001216:	d1fa      	bne.n	800120e <SystemClock_Config+0x86>
  {

  }
  LL_Init1msTick(48000000);
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <SystemClock_Config+0xb0>)
 800121a:	0018      	movs	r0, r3
 800121c:	f001 fb2a 	bl	8002874 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SystemClock_Config+0xb0>)
 8001222:	0018      	movs	r0, r3
 8001224:	f001 fb36 	bl	8002894 <LL_SetSystemCoreClock>
  LL_RCC_HSI14_EnableADCControl();
 8001228:	f7ff fe10 	bl	8000e4c <LL_RCC_HSI14_EnableADCControl>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fe79 	bl	8000f24 <LL_RCC_SetI2CClockSource>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	02dc6c00 	.word	0x02dc6c00

0800123c <LL_GPIO_ResetOutputPin>:
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <menu_get_index>:
//void (*key_enterlong_func)(void) = &system_esc;
//void (*key_stop_func)(void) = &menu_back;
//void (*key_start_func)(void) = &menu_back;
//void (*key_backshort_func)(void) = NULL;

uint8_t menu_get_index(menu_t *q) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

	menu_t *temp;
	uint8_t i = 0;
 800125c:	230b      	movs	r3, #11
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

	if (q->parent)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <menu_get_index+0x22>
		temp = (q->parent)->child;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e00b      	b.n	800128e <menu_get_index+0x3a>
	else
		temp = &par;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <menu_get_index+0x50>)
 8001278:	60fb      	str	r3, [r7, #12]

	while (temp != q) {
 800127a:	e008      	b.n	800128e <menu_get_index+0x3a>
		temp = temp->next;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	60fb      	str	r3, [r7, #12]
		i++;
 8001282:	210b      	movs	r1, #11
 8001284:	187b      	adds	r3, r7, r1
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	187b      	adds	r3, r7, r1
 800128a:	3201      	adds	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	while (temp != q) {
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d1f2      	bne.n	800127c <menu_get_index+0x28>
	}

	return i;
 8001296:	230b      	movs	r3, #11
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	781b      	ldrb	r3, [r3, #0]
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000

080012a8 <menu_next>:

void menu_next(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

	if (currentPointer->next) {
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <menu_next+0x54>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <menu_next+0x26>
		currentPointer = currentPointer->next;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <menu_next+0x54>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <menu_next+0x54>)
 80012be:	601a      	str	r2, [r3, #0]
		menu_index++;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <menu_next+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <menu_next+0x58>)
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e011      	b.n	80012f2 <menu_next+0x4a>

	} else {
		menu_index = 0;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <menu_next+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

		if (currentPointer->parent)
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <menu_next+0x54>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <menu_next+0x44>
			currentPointer = (currentPointer->parent)->child;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <menu_next+0x54>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <menu_next+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e002      	b.n	80012f2 <menu_next+0x4a>
		else
			currentPointer = &par;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <menu_next+0x54>)
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <menu_next+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
	}

	menu_refresh();
 80012f2:	f000 f879 	bl	80013e8 <menu_refresh>

}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200000c4 	.word	0x200000c4
 8001300:	200000f4 	.word	0x200000f4
 8001304:	20000000 	.word	0x20000000

08001308 <menu_prev>:

void menu_prev(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

	currentPointer = currentPointer->prev;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <menu_prev+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <menu_prev+0x40>)
 8001314:	601a      	str	r2, [r3, #0]

	if (menu_index) {
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <menu_prev+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <menu_prev+0x24>
		menu_index--;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <menu_prev+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <menu_prev+0x44>)
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e008      	b.n	800133e <menu_prev+0x36>

	} else {
		menu_index = menu_get_index(currentPointer);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <menu_prev+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff ff8f 	bl	8001254 <menu_get_index>
 8001336:	0003      	movs	r3, r0
 8001338:	001a      	movs	r2, r3
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <menu_prev+0x44>)
 800133c:	701a      	strb	r2, [r3, #0]

	}

	menu_refresh();
 800133e:	f000 f853 	bl	80013e8 <menu_refresh>
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000c4 	.word	0x200000c4
 800134c:	200000f4 	.word	0x200000f4

08001350 <menu_enter>:

void menu_enter(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

	if (currentPointer->menu_function)
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <menu_enter+0x3c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <menu_enter+0x16>
		currentPointer->menu_function();
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <menu_enter+0x3c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4798      	blx	r3

	if (currentPointer->child) {
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <menu_enter+0x3c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <menu_enter+0x34>

		menu_index = 0;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <menu_enter+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]

		currentPointer = currentPointer->child;
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <menu_enter+0x3c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <menu_enter+0x3c>)
 800137e:	601a      	str	r2, [r3, #0]

		menu_refresh();
 8001380:	f000 f832 	bl	80013e8 <menu_refresh>
	}
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	200000c4 	.word	0x200000c4
 8001390:	200000f4 	.word	0x200000f4

08001394 <menu_back>:

void menu_back(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

	if (currentPointer->parent) {
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <menu_back+0x34>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00f      	beq.n	80013c2 <menu_back+0x2e>

		currentPointer = currentPointer->parent;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <menu_back+0x34>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <menu_back+0x34>)
 80013aa:	601a      	str	r2, [r3, #0]
		menu_index = menu_get_index(currentPointer);
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <menu_back+0x34>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ff4f 	bl	8001254 <menu_get_index>
 80013b6:	0003      	movs	r3, r0
 80013b8:	001a      	movs	r2, r3
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <menu_back+0x38>)
 80013bc:	701a      	strb	r2, [r3, #0]

		menu_refresh();
 80013be:	f000 f813 	bl	80013e8 <menu_refresh>

	}
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000c4 	.word	0x200000c4
 80013cc:	200000f4 	.word	0x200000f4

080013d0 <system_esc>:

void system_esc(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(POWER_ALL_GPIO_Port, POWER_ALL_Pin);
 80013d4:	2390      	movs	r3, #144	; 0x90
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	2101      	movs	r1, #1
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff ff2e 	bl	800123c <LL_GPIO_ResetOutputPin>
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <menu_refresh>:

void menu_refresh(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
	//LCD_refreshScr();
	LCD_clrScr();
 80013ee:	f000 fbb1 	bl	8001b54 <LCD_clrScr>
	menu_t *temp;
	uint8_t i;

	currentPointer->menu_refresh();
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <menu_refresh+0xd8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4798      	blx	r3

	if (currentPointer->parent)
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <menu_refresh+0xd8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <menu_refresh+0x28>
		temp = (currentPointer->parent)->child;
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <menu_refresh+0xd8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e001      	b.n	8001414 <menu_refresh+0x2c>

	else
		temp = &par;
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <menu_refresh+0xdc>)
 8001412:	617b      	str	r3, [r7, #20]

	for (i = 0; i != menu_index; i++) {
 8001414:	2313      	movs	r3, #19
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e008      	b.n	8001430 <menu_refresh+0x48>
		temp = temp->next;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	617b      	str	r3, [r7, #20]
	for (i = 0; i != menu_index; i++) {
 8001424:	2113      	movs	r1, #19
 8001426:	187b      	adds	r3, r7, r1
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	187b      	adds	r3, r7, r1
 800142c:	3201      	adds	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <menu_refresh+0xe0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2213      	movs	r2, #19
 8001436:	18ba      	adds	r2, r7, r2
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d1ef      	bne.n	800141e <menu_refresh+0x36>
	/*LCD_print("PAR 00:00", 0, 9);
	 LCD_print("shoot 00", 46, 9);*/

	//LCD_print("00:00:00", 0, 18);
	uint32_t bat;
	ADC1->CHSELR = ADC_CHSELR_CHSEL1;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <menu_refresh+0xe4>)
 8001440:	2202      	movs	r2, #2
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1->CR |= ADC_CR_ADSTART;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <menu_refresh+0xe4>)
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <menu_refresh+0xe4>)
 800144a:	2104      	movs	r1, #4
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
	while (ADC1->CR & ADC_CR_ADSTART)
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <menu_refresh+0xe4>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2204      	movs	r2, #4
 8001458:	4013      	ands	r3, r2
 800145a:	d1fa      	bne.n	8001452 <menu_refresh+0x6a>
		;
	bat = ADC1->DR;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <menu_refresh+0xe4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	60fb      	str	r3, [r7, #12]

	uint16_t bat1 = (uint16_t) (bat * 3300 / 4096 * 2);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <menu_refresh+0xe8>)
 8001466:	4353      	muls	r3, r2
 8001468:	0b1b      	lsrs	r3, r3, #12
 800146a:	b29b      	uxth	r3, r3
 800146c:	210a      	movs	r1, #10
 800146e:	187a      	adds	r2, r7, r1
 8001470:	18db      	adds	r3, r3, r3
 8001472:	8013      	strh	r3, [r2, #0]

	char buffer[5];
	itoa((bat1 * 100 / 4200), buffer, 10);
 8001474:	187b      	adds	r3, r7, r1
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	212a      	movs	r1, #42	; 0x2a
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe fece 	bl	800021c <__divsi3>
 8001480:	0003      	movs	r3, r0
 8001482:	0018      	movs	r0, r3
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	220a      	movs	r2, #10
 8001488:	0019      	movs	r1, r3
 800148a:	f001 fa4d 	bl	8002928 <itoa>
	LCD_print(buffer, 22, 45);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	222d      	movs	r2, #45	; 0x2d
 8001492:	2116      	movs	r1, #22
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fb13 	bl	8001ac0 <LCD_print>
	//LCD_print("shoot 00", 0, 36);

	LCD_print("batt:", 0, 45);
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <menu_refresh+0xec>)
 800149c:	222d      	movs	r2, #45	; 0x2d
 800149e:	2100      	movs	r1, #0
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fb0d 	bl	8001ac0 <LCD_print>
	LCD_print("%", 35, 45);
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <menu_refresh+0xf0>)
 80014a8:	222d      	movs	r2, #45	; 0x2d
 80014aa:	2123      	movs	r1, #35	; 0x23
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 fb07 	bl	8001ac0 <LCD_print>

	temp = temp->next;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	617b      	str	r3, [r7, #20]

}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b006      	add	sp, #24
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200000c4 	.word	0x200000c4
 80014c4:	20000000 	.word	0x20000000
 80014c8:	200000f4 	.word	0x200000f4
 80014cc:	40012400 	.word	0x40012400
 80014d0:	00000ce4 	.word	0x00000ce4
 80014d4:	08002a08 	.word	0x08002a08
 80014d8:	08002a10 	.word	0x08002a10

080014dc <key_next_press>:

void key_next_press(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

	if (BUTTON_1) {
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <key_next_press+0x68>)
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4013      	ands	r3, r2
 80014ec:	d126      	bne.n	800153c <key_next_press+0x60>
		uint16_t timer = 0;
 80014ee:	1dbb      	adds	r3, r7, #6
 80014f0:	2200      	movs	r2, #0
 80014f2:	801a      	strh	r2, [r3, #0]

		while (BUTTON_1) {
 80014f4:	e007      	b.n	8001506 <key_next_press+0x2a>
			timer++; // count how long button is pressed
 80014f6:	1dbb      	adds	r3, r7, #6
 80014f8:	881a      	ldrh	r2, [r3, #0]
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	3201      	adds	r2, #1
 80014fe:	801a      	strh	r2, [r3, #0]
			Delay_ms(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f000 fd3f 	bl	8001f84 <Delay_ms>
		while (BUTTON_1) {
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <key_next_press+0x68>)
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4013      	ands	r3, r2
 8001510:	d0f1      	beq.n	80014f6 <key_next_press+0x1a>
		}

		if (timer < 500UL) { //unsigned long
 8001512:	1dbb      	adds	r3, r7, #6
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	23fa      	movs	r3, #250	; 0xfa
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	429a      	cmp	r2, r3
 800151c:	d207      	bcs.n	800152e <key_next_press+0x52>
							 //single click
			if (next_func != NULL) {
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <key_next_press+0x6c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <key_next_press+0x60>
				next_func();
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <key_next_press+0x6c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4798      	blx	r3
			if (nextlong_func != NULL) {
				nextlong_func();
			}
		}
	}
}
 800152c:	e006      	b.n	800153c <key_next_press+0x60>
			if (nextlong_func != NULL) {
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <key_next_press+0x70>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <key_next_press+0x60>
				nextlong_func();
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <key_next_press+0x70>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4798      	blx	r3
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000800 	.word	0x48000800
 8001548:	200000a8 	.word	0x200000a8
 800154c:	200000ec 	.word	0x200000ec

08001550 <key_prev_press>:
void key_prev_press(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

	if (BUTTON_2) {
 8001556:	2390      	movs	r3, #144	; 0x90
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d127      	bne.n	80015b4 <key_prev_press+0x64>
		uint16_t timer = 0;
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]

		while (BUTTON_2) {
 800156a:	e007      	b.n	800157c <key_prev_press+0x2c>
			timer++; // count how long button is pressed
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	881a      	ldrh	r2, [r3, #0]
 8001570:	1dbb      	adds	r3, r7, #6
 8001572:	3201      	adds	r2, #1
 8001574:	801a      	strh	r2, [r3, #0]
			Delay_ms(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fd04 	bl	8001f84 <Delay_ms>
		while (BUTTON_2) {
 800157c:	2390      	movs	r3, #144	; 0x90
 800157e:	05db      	lsls	r3, r3, #23
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d0f0      	beq.n	800156c <key_prev_press+0x1c>
		}
		if (timer < 500UL) { //unsigned long
 800158a:	1dbb      	adds	r3, r7, #6
 800158c:	881a      	ldrh	r2, [r3, #0]
 800158e:	23fa      	movs	r3, #250	; 0xfa
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	429a      	cmp	r2, r3
 8001594:	d207      	bcs.n	80015a6 <key_prev_press+0x56>
			//single click
			if (prev_func != NULL) {
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <key_prev_press+0x6c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <key_prev_press+0x64>
				prev_func();
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <key_prev_press+0x6c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4798      	blx	r3
			}
		}

	}

}
 80015a4:	e006      	b.n	80015b4 <key_prev_press+0x64>
			if (prevlong_func != NULL) {
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <key_prev_press+0x70>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <key_prev_press+0x64>
				prevlong_func();
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <key_prev_press+0x70>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4798      	blx	r3
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000ac 	.word	0x200000ac
 80015c0:	200000e8 	.word	0x200000e8

080015c4 <key_ok_press>:

void key_ok_press(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

	if (BUTTON_MAIN) {
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <key_ok_press+0x78>)
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d12d      	bne.n	8001632 <key_ok_press+0x6e>

		uint16_t timer = 0;
 80015d6:	1dbb      	adds	r3, r7, #6
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
		if (backshort_func)
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <key_ok_press+0x7c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <key_ok_press+0x38>
					{backshort_func();}
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <key_ok_press+0x7c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4798      	blx	r3

		while (BUTTON_MAIN) {
 80015ea:	e007      	b.n	80015fc <key_ok_press+0x38>
			timer++;
 80015ec:	1dbb      	adds	r3, r7, #6
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	3201      	adds	r2, #1
 80015f4:	801a      	strh	r2, [r3, #0]
			Delay_ms(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fcc4 	bl	8001f84 <Delay_ms>
		while (BUTTON_MAIN) {
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <key_ok_press+0x78>)
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d0f1      	beq.n	80015ec <key_ok_press+0x28>
		}
		if (timer < 500UL) {	                   //unsigned long
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	881a      	ldrh	r2, [r3, #0]
 800160c:	23fa      	movs	r3, #250	; 0xfa
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <key_ok_press+0x60>
			//single click
			if (enter_func != NULL) {
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <key_ok_press+0x80>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <key_ok_press+0x6e>
				enter_func();
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <key_ok_press+0x80>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4798      	blx	r3
			}
		}

	}

}
 8001622:	e006      	b.n	8001632 <key_ok_press+0x6e>
			if (enterlong_func != NULL) {
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <key_ok_press+0x84>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <key_ok_press+0x6e>
				enterlong_func();
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <key_ok_press+0x84>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4798      	blx	r3
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b002      	add	sp, #8
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	48000800 	.word	0x48000800
 8001640:	200000f0 	.word	0x200000f0
 8001644:	200000b4 	.word	0x200000b4
 8001648:	200000b0 	.word	0x200000b0

0800164c <key_esc_press>:

void key_esc_press(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

	if (BUTTON_3) {
 8001652:	2390      	movs	r3, #144	; 0x90
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d12e      	bne.n	80016be <key_esc_press+0x72>

		uint16_t timer = 0;
 8001660:	1dbb      	adds	r3, r7, #6
 8001662:	2200      	movs	r2, #0
 8001664:	801a      	strh	r2, [r3, #0]
		if (backshort_func)
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <key_esc_press+0x7c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <key_esc_press+0x3a>
					{backshort_func();}
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <key_esc_press+0x7c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4798      	blx	r3

		while (BUTTON_3) {
 8001674:	e007      	b.n	8001686 <key_esc_press+0x3a>
			timer++;
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	881a      	ldrh	r2, [r3, #0]
 800167a:	1dbb      	adds	r3, r7, #6
 800167c:	3201      	adds	r2, #1
 800167e:	801a      	strh	r2, [r3, #0]
			Delay_ms(1);
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fc7f 	bl	8001f84 <Delay_ms>
		while (BUTTON_3) {
 8001686:	2390      	movs	r3, #144	; 0x90
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f0      	beq.n	8001676 <key_esc_press+0x2a>
		}
		if (timer < 500UL) {                  //unsigned long
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	23fa      	movs	r3, #250	; 0xfa
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <key_esc_press+0x64>
			//single click
			if (enter_func != NULL) {
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <key_esc_press+0x80>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00a      	beq.n	80016be <key_esc_press+0x72>
				enter_func();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <key_esc_press+0x80>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4798      	blx	r3
			}
		}

	}

}
 80016ae:	e006      	b.n	80016be <key_esc_press+0x72>
			if (back_func != NULL) {
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <key_esc_press+0x84>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <key_esc_press+0x72>
				back_func();
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <key_esc_press+0x84>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4798      	blx	r3
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	200000f0 	.word	0x200000f0
 80016cc:	200000b4 	.word	0x200000b4
 80016d0:	200000b8 	.word	0x200000b8

080016d4 <key_stop_press>:
void key_stop_press(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

	if (BUTTON_STOP) {
 80016da:	2390      	movs	r3, #144	; 0x90
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d12e      	bne.n	8001746 <key_stop_press+0x72>

		uint16_t timer = 0;
 80016e8:	1dbb      	adds	r3, r7, #6
 80016ea:	2200      	movs	r2, #0
 80016ec:	801a      	strh	r2, [r3, #0]
		if (backshort_func)
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <key_stop_press+0x7c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <key_stop_press+0x3a>
					{backshort_func();}
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <key_stop_press+0x7c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4798      	blx	r3

		while (BUTTON_STOP) {
 80016fc:	e007      	b.n	800170e <key_stop_press+0x3a>
			timer++;
 80016fe:	1dbb      	adds	r3, r7, #6
 8001700:	881a      	ldrh	r2, [r3, #0]
 8001702:	1dbb      	adds	r3, r7, #6
 8001704:	3201      	adds	r2, #1
 8001706:	801a      	strh	r2, [r3, #0]
			Delay_ms(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 fc3b 	bl	8001f84 <Delay_ms>
		while (BUTTON_STOP) {
 800170e:	2390      	movs	r3, #144	; 0x90
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4013      	ands	r3, r2
 800171a:	d0f0      	beq.n	80016fe <key_stop_press+0x2a>
		}
		if (timer < 500UL) {                  //unsigned long
 800171c:	1dbb      	adds	r3, r7, #6
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	23fa      	movs	r3, #250	; 0xfa
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <key_stop_press+0x64>
			//single click
			if (stop_func != NULL) {
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <key_stop_press+0x80>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <key_stop_press+0x72>
				stop_func();
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <key_stop_press+0x80>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4798      	blx	r3
			}
		}

	}

}
 8001736:	e006      	b.n	8001746 <key_stop_press+0x72>
			if (back_func != NULL) {
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <key_stop_press+0x84>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <key_stop_press+0x72>
				back_func();
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <key_stop_press+0x84>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4798      	blx	r3
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	200000f0 	.word	0x200000f0
 8001754:	200000bc 	.word	0x200000bc
 8001758:	200000b8 	.word	0x200000b8

0800175c <key_start_press>:
void key_start_press(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0

	if (BUTTON_START) {
 8001762:	2390      	movs	r3, #144	; 0x90
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4013      	ands	r3, r2
 800176e:	d12e      	bne.n	80017ce <key_start_press+0x72>

		uint16_t timer = 0;
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]
		if (backshort_func)
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <key_start_press+0x7c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <key_start_press+0x3a>
			{backshort_func();}
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <key_start_press+0x7c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4798      	blx	r3

		while (BUTTON_START) {
 8001784:	e007      	b.n	8001796 <key_start_press+0x3a>
			timer++;
 8001786:	1dbb      	adds	r3, r7, #6
 8001788:	881a      	ldrh	r2, [r3, #0]
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	3201      	adds	r2, #1
 800178e:	801a      	strh	r2, [r3, #0]
			Delay_ms(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f000 fbf7 	bl	8001f84 <Delay_ms>
		while (BUTTON_START) {
 8001796:	2390      	movs	r3, #144	; 0x90
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4013      	ands	r3, r2
 80017a2:	d0f0      	beq.n	8001786 <key_start_press+0x2a>
		}
		if (timer < 500UL) {                  //unsigned long
 80017a4:	1dbb      	adds	r3, r7, #6
 80017a6:	881a      	ldrh	r2, [r3, #0]
 80017a8:	23fa      	movs	r3, #250	; 0xfa
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <key_start_press+0x64>
			//single click
			if (start_func != NULL) {
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <key_start_press+0x80>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00a      	beq.n	80017ce <key_start_press+0x72>
				start_func();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <key_start_press+0x80>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4798      	blx	r3
			}
	}

}

}
 80017be:	e006      	b.n	80017ce <key_start_press+0x72>
			if (back_func != NULL) {
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <key_start_press+0x84>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <key_start_press+0x72>
				back_func();
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <key_start_press+0x84>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4798      	blx	r3
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	200000f0 	.word	0x200000f0
 80017dc:	200000c0 	.word	0x200000c0
 80017e0:	200000b8 	.word	0x200000b8

080017e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	000a      	movs	r2, r1
 80017ee:	1cfb      	adds	r3, r7, #3
 80017f0:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	330c      	adds	r3, #12
 80017f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1cfa      	adds	r2, r7, #3
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bd80      	pop	{r7, pc}

08001808 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t data) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	701a      	strb	r2, [r3, #0]

	if (SPI1->SR & SPI_SR_TXE) {
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <LCD_send+0x2c>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d006      	beq.n	800182c <LCD_send+0x24>

		LL_SPI_TransmitData8(SPI1, data);
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <LCD_send+0x2c>)
 8001824:	0019      	movs	r1, r3
 8001826:	0010      	movs	r0, r2
 8001828:	f7ff ffdc 	bl	80017e4 <LL_SPI_TransmitData8>
	}

}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40013000 	.word	0x40013000

08001838 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	0002      	movs	r2, r0
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	1dbb      	adds	r3, r7, #6
 8001846:	1c0a      	adds	r2, r1, #0
 8001848:	701a      	strb	r2, [r3, #0]
	if (mode == LCD_COMMAND) {
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d117      	bne.n	8001882 <LCD_write+0x4a>
		DCPORT->BRR |= DCPIN;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <LCD_write+0x80>)
 8001854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <LCD_write+0x80>)
 8001858:	2110      	movs	r1, #16
 800185a:	430a      	orrs	r2, r1
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
		CEPORT->BRR |= CEPIN;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <LCD_write+0x84>)
 8001860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <LCD_write+0x84>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	629a      	str	r2, [r3, #40]	; 0x28

		LCD_send(data);
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	0018      	movs	r0, r3
 8001870:	f7ff ffca 	bl	8001808 <LCD_send>
		CEPORT->BSRR |= CEPIN;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <LCD_write+0x84>)
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <LCD_write+0x84>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	619a      	str	r2, [r3, #24]

		LCD_send(data);
		CEPORT->BSRR |= CEPIN; // 1

	}
}
 8001880:	e016      	b.n	80018b0 <LCD_write+0x78>
		DCPORT->BSRR |= DCPIN; // 1
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <LCD_write+0x80>)
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <LCD_write+0x80>)
 8001888:	2110      	movs	r1, #16
 800188a:	430a      	orrs	r2, r1
 800188c:	619a      	str	r2, [r3, #24]
		CEPORT->BRR |= CEPIN; // 0
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <LCD_write+0x84>)
 8001890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <LCD_write+0x84>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
		LCD_send(data);
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff ffb2 	bl	8001808 <LCD_send>
		CEPORT->BSRR |= CEPIN; // 1
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <LCD_write+0x84>)
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <LCD_write+0x84>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	619a      	str	r2, [r3, #24]
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000400 	.word	0x48000400

080018c0 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

	RSTPORT->BRR |= RSTPIN; // 0
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <LCD_init+0x60>)
 80018c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <LCD_init+0x60>)
 80018ca:	2120      	movs	r1, #32
 80018cc:	430a      	orrs	r2, r1
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28

	RSTPORT->BSRR |= RSTPIN; // 1
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <LCD_init+0x60>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <LCD_init+0x60>)
 80018d6:	2120      	movs	r1, #32
 80018d8:	430a      	orrs	r2, r1
 80018da:	619a      	str	r2, [r3, #24]

	LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 80018dc:	2100      	movs	r1, #0
 80018de:	2021      	movs	r0, #33	; 0x21
 80018e0:	f7ff ffaa 	bl	8001838 <LCD_write>
	LCD_write(0xC5, LCD_COMMAND); //set LCD Vop(Contrast).
 80018e4:	2100      	movs	r1, #0
 80018e6:	20c5      	movs	r0, #197	; 0xc5
 80018e8:	f7ff ffa6 	bl	8001838 <LCD_write>
	LCD_write(0x07, LCD_COMMAND); //set temp coefficent.
 80018ec:	2100      	movs	r1, #0
 80018ee:	2007      	movs	r0, #7
 80018f0:	f7ff ffa2 	bl	8001838 <LCD_write>
	LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80018f4:	2100      	movs	r1, #0
 80018f6:	2014      	movs	r0, #20
 80018f8:	f7ff ff9e 	bl	8001838 <LCD_write>
	LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80018fc:	2100      	movs	r1, #0
 80018fe:	2020      	movs	r0, #32
 8001900:	f7ff ff9a 	bl	8001838 <LCD_write>
	LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8001904:	2100      	movs	r1, #0
 8001906:	200c      	movs	r0, #12
 8001908:	f7ff ff96 	bl	8001838 <LCD_write>
	LCD_clrScr();
 800190c:	f000 f922 	bl	8001b54 <LCD_clrScr>
	lcd.inverttext = false;
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <LCD_init+0x64>)
 8001912:	23fc      	movs	r3, #252	; 0xfc
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2100      	movs	r1, #0
 8001918:	54d1      	strb	r1, [r2, r3]
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	48000800 	.word	0x48000800
 8001924:	200000f8 	.word	0x200000f8

08001928 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	1dfb      	adds	r3, r7, #7
 8001932:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e028      	b.n	800198c <LCD_putChar+0x64>
		if (lcd.inverttext != true)
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <LCD_putChar+0x74>)
 800193c:	23fc      	movs	r3, #252	; 0xfc
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	2201      	movs	r2, #1
 8001944:	4053      	eors	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <LCD_putChar+0x40>
			LCD_write(FontTiny[c - 0x20][i], LCD_DATA);
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3b20      	subs	r3, #32
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <LCD_putChar+0x78>)
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	18d2      	adds	r2, r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	18d3      	adds	r3, r2, r3
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ff69 	bl	8001838 <LCD_write>
 8001966:	e00e      	b.n	8001986 <LCD_putChar+0x5e>
		else
			LCD_write(~(FontTiny[c - 0x20][i]), LCD_DATA);
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3b20      	subs	r3, #32
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <LCD_putChar+0x78>)
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	18d2      	adds	r2, r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	18d3      	adds	r3, r2, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	43db      	mvns	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2101      	movs	r1, #1
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff ff59 	bl	8001838 <LCD_write>
	for (int i = 0; i < 4; i++) {
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b03      	cmp	r3, #3
 8001990:	ddd3      	ble.n	800193a <LCD_putChar+0x12>
	}
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200000f8 	.word	0x200000f8
 80019a0:	08002a38 	.word	0x08002a38

080019a4 <LCD_putChar_big>:

void LCD_putChar_big(char character) {
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	0002      	movs	r2, r0
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	701a      	strb	r2, [r3, #0]
	uint16_t totalchar = 0;
 80019b0:	230c      	movs	r3, #12
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
	uint8_t topchar = 0;
 80019b8:	230b      	movs	r3, #11
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
	uint8_t botchar = 0;
 80019c0:	230a      	movs	r3, #10
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
	uint8_t column = 0;
 80019c8:	210f      	movs	r1, #15
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	//print upper byte
	for (column = 0; column < 10; column++) {
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e021      	b.n	8001a1c <LCD_putChar_big+0x78>
		totalchar = (FontLarge[character - 0x20][column]);
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b20      	subs	r3, #32
 80019de:	001a      	movs	r2, r3
 80019e0:	250f      	movs	r5, #15
 80019e2:	197b      	adds	r3, r7, r5
 80019e4:	781c      	ldrb	r4, [r3, #0]
 80019e6:	260c      	movs	r6, #12
 80019e8:	19b9      	adds	r1, r7, r6
 80019ea:	4832      	ldr	r0, [pc, #200]	; (8001ab4 <LCD_putChar_big+0x110>)
 80019ec:	0013      	movs	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	189b      	adds	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	191b      	adds	r3, r3, r4
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	5a1b      	ldrh	r3, [r3, r0]
 80019fa:	800b      	strh	r3, [r1, #0]
		topchar = totalchar & 0x00FF;
 80019fc:	210b      	movs	r1, #11
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	19ba      	adds	r2, r7, r6
 8001a02:	8812      	ldrh	r2, [r2, #0]
 8001a04:	701a      	strb	r2, [r3, #0]
		LCD_write(topchar, LCD_DATA);
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff13 	bl	8001838 <LCD_write>
	for (column = 0; column < 10; column++) {
 8001a12:	197b      	adds	r3, r7, r5
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	197b      	adds	r3, r7, r5
 8001a18:	3201      	adds	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	240f      	movs	r4, #15
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	d9d8      	bls.n	80019d8 <LCD_putChar_big+0x34>
	}
	//Move to next block
	LCD_goXY(_Col, _Block + 1);
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <LCD_putChar_big+0x114>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <LCD_putChar_big+0x118>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	0019      	movs	r1, r3
 8001a34:	0010      	movs	r0, r2
 8001a36:	f000 f8ab 	bl	8001b90 <LCD_goXY>
	//print lowerbyte
	for (column = 0; column < 12; column++) {
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	e023      	b.n	8001a8a <LCD_putChar_big+0xe6>
		totalchar = (FontLarge[character - 0x20][column]);
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3b20      	subs	r3, #32
 8001a48:	001a      	movs	r2, r3
 8001a4a:	250f      	movs	r5, #15
 8001a4c:	197b      	adds	r3, r7, r5
 8001a4e:	781c      	ldrb	r4, [r3, #0]
 8001a50:	260c      	movs	r6, #12
 8001a52:	19b9      	adds	r1, r7, r6
 8001a54:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <LCD_putChar_big+0x110>)
 8001a56:	0013      	movs	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	191b      	adds	r3, r3, r4
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	5a1b      	ldrh	r3, [r3, r0]
 8001a64:	800b      	strh	r3, [r1, #0]
		botchar = (totalchar >> 8) & 0xFF;
 8001a66:	19bb      	adds	r3, r7, r6
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	210a      	movs	r1, #10
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	701a      	strb	r2, [r3, #0]
		LCD_write(botchar, LCD_DATA);
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fedc 	bl	8001838 <LCD_write>
	for (column = 0; column < 12; column++) {
 8001a80:	197b      	adds	r3, r7, r5
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	197b      	adds	r3, r7, r5
 8001a86:	3201      	adds	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b0b      	cmp	r3, #11
 8001a92:	d9d6      	bls.n	8001a42 <LCD_putChar_big+0x9e>
	}
	//move back to upper block
	LCD_goXY(_Col + 10, _Block - 1);
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <LCD_putChar_big+0x114>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	330a      	adds	r3, #10
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <LCD_putChar_big+0x118>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	f000 f872 	bl	8001b90 <LCD_goXY>
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b005      	add	sp, #20
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab4:	08002bb4 	.word	0x08002bb4
 8001ab8:	200002f2 	.word	0x200002f2
 8001abc:	200002f1 	.word	0x200002f1

08001ac0 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	0008      	movs	r0, r1
 8001aca:	0011      	movs	r1, r2
 8001acc:	1cfb      	adds	r3, r7, #3
 8001ace:	1c02      	adds	r2, r0, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	1cbb      	adds	r3, r7, #2
 8001ad4:	1c0a      	adds	r2, r1, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
	LCD_goXY(x, y);
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	1cfb      	adds	r3, r7, #3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 f854 	bl	8001b90 <LCD_goXY>
	while (*str) {
 8001ae8:	e006      	b.n	8001af8 <LCD_print+0x38>
		LCD_putChar(*str++);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ff18 	bl	8001928 <LCD_putChar>
	while (*str) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f4      	bne.n	8001aea <LCD_print+0x2a>
	}
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <LCD_print_big>:

void LCD_print_big(char *str, uint8_t x, uint8_t y) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	0008      	movs	r0, r1
 8001b14:	0011      	movs	r1, r2
 8001b16:	1cfb      	adds	r3, r7, #3
 8001b18:	1c02      	adds	r2, r0, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	1cbb      	adds	r3, r7, #2
 8001b1e:	1c0a      	adds	r2, r1, #0
 8001b20:	701a      	strb	r2, [r3, #0]
	LCD_goXY(x, y);
 8001b22:	1cbb      	adds	r3, r7, #2
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	1cfb      	adds	r3, r7, #3
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 f82f 	bl	8001b90 <LCD_goXY>
	while (*str) {
 8001b32:	e006      	b.n	8001b42 <LCD_print_big+0x38>
		LCD_putChar_big(*str++);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <LCD_putChar_big>
	while (*str) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f4      	bne.n	8001b34 <LCD_print_big+0x2a>
	}
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <LCD_clrScr>:
/*
 * @brief Clear the screen
 */
void LCD_clrScr() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	for (int i = 0; i < 504; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e00b      	b.n	8001b78 <LCD_clrScr+0x24>
		LCD_write(0x00, LCD_DATA);
 8001b60:	2101      	movs	r1, #1
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fe68 	bl	8001838 <LCD_write>
		lcd.buffer[i] = 0;
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <LCD_clrScr+0x38>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 504; i++) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3301      	adds	r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	23fc      	movs	r3, #252	; 0xfc
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbee      	blt.n	8001b60 <LCD_clrScr+0xc>
	}
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200000f8 	.word	0x200000f8

08001b90 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	0002      	movs	r2, r0
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	1dbb      	adds	r3, r7, #6
 8001b9e:	1c0a      	adds	r2, r1, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
	LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	4252      	negs	r2, r2
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fe41 	bl	8001838 <LCD_write>
	LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8001bb6:	1dbb      	adds	r3, r7, #6
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff fe38 	bl	8001838 <LCD_write>
	_Block = y;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <LCD_goXY+0x50>)
 8001bca:	1dba      	adds	r2, r7, #6
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	701a      	strb	r2, [r3, #0]
	_Col = x;
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <LCD_goXY+0x54>)
 8001bd2:	1dfa      	adds	r2, r7, #7
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200002f1 	.word	0x200002f1
 8001be4:	200002f2 	.word	0x200002f2

08001be8 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr() {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	2080      	movs	r0, #128	; 0x80
 8001bf2:	f7ff ffcd 	bl	8001b90 <LCD_goXY>
	for (int i = 0; i < 6; i++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	e016      	b.n	8001c2a <LCD_refreshScr+0x42>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	e00d      	b.n	8001c1e <LCD_refreshScr+0x36>
			LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2254      	movs	r2, #84	; 0x54
 8001c06:	435a      	muls	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LCD_refreshScr+0x54>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	2101      	movs	r1, #1
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7ff fe10 	bl	8001838 <LCD_write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b53      	cmp	r3, #83	; 0x53
 8001c22:	ddee      	ble.n	8001c02 <LCD_refreshScr+0x1a>
	for (int i = 0; i < 6; i++) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3301      	adds	r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	dde5      	ble.n	8001bfc <LCD_refreshScr+0x14>
		}
	}
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	200000f8 	.word	0x200000f8

08001c40 <__NVIC_EnableIRQ>:
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	0002      	movs	r2, r0
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b7f      	cmp	r3, #127	; 0x7f
 8001c52:	d809      	bhi.n	8001c68 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c54:	1dfb      	adds	r3, r7, #7
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	001a      	movs	r2, r3
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_EnableIRQ+0x30>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	4091      	lsls	r1, r2
 8001c64:	000a      	movs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b7f      	cmp	r3, #127	; 0x7f
 8001c88:	d828      	bhi.n	8001cdc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <__NVIC_SetPriority+0xd4>)
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	33c0      	adds	r3, #192	; 0xc0
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	589b      	ldr	r3, [r3, r2]
 8001c9a:	1dfa      	adds	r2, r7, #7
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	00d2      	lsls	r2, r2, #3
 8001ca6:	21ff      	movs	r1, #255	; 0xff
 8001ca8:	4091      	lsls	r1, r2
 8001caa:	000a      	movs	r2, r1
 8001cac:	43d2      	mvns	r2, r2
 8001cae:	401a      	ands	r2, r3
 8001cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	401a      	ands	r2, r3
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	4003      	ands	r3, r0
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc8:	481f      	ldr	r0, [pc, #124]	; (8001d48 <__NVIC_SetPriority+0xd4>)
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	33c0      	adds	r3, #192	; 0xc0
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	501a      	str	r2, [r3, r0]
}
 8001cda:	e031      	b.n	8001d40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <__NVIC_SetPriority+0xd8>)
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	230f      	movs	r3, #15
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	3b08      	subs	r3, #8
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3306      	adds	r3, #6
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1dfa      	adds	r2, r7, #7
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	400a      	ands	r2, r1
 8001d00:	00d2      	lsls	r2, r2, #3
 8001d02:	21ff      	movs	r1, #255	; 0xff
 8001d04:	4091      	lsls	r1, r2
 8001d06:	000a      	movs	r2, r1
 8001d08:	43d2      	mvns	r2, r2
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	22ff      	movs	r2, #255	; 0xff
 8001d14:	401a      	ands	r2, r3
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	4003      	ands	r3, r0
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <__NVIC_SetPriority+0xd8>)
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	001c      	movs	r4, r3
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	4023      	ands	r3, r4
 8001d30:	3b08      	subs	r3, #8
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	430a      	orrs	r2, r1
 8001d36:	3306      	adds	r3, #6
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	18c3      	adds	r3, r0, r3
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b003      	add	sp, #12
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <LL_AHB1_GRP1_EnableClock>:
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001d5a:	6959      	ldr	r1, [r3, #20]
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <LL_APB1_GRP2_EnableClock>:
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <LL_APB1_GRP2_EnableClock+0x28>)
 8001d86:	6999      	ldr	r1, [r3, #24]
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <LL_APB1_GRP2_EnableClock+0x28>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <LL_APB1_GRP2_EnableClock+0x28>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4013      	ands	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000

08001da8 <LL_SPI_SetStandard>:
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2210      	movs	r2, #16
 8001db8:	4393      	bics	r3, r2
 8001dba:	001a      	movs	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	605a      	str	r2, [r3, #4]
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <LL_SPI_EnableNSSPulseMgt>:
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b002      	add	sp, #8
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b091      	sub	sp, #68	; 0x44
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001dee:	2418      	movs	r4, #24
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	0018      	movs	r0, r3
 8001df4:	2328      	movs	r3, #40	; 0x28
 8001df6:	001a      	movs	r2, r3
 8001df8:	2100      	movs	r1, #0
 8001dfa:	f000 fd99 	bl	8002930 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	003b      	movs	r3, r7
 8001e00:	0018      	movs	r0, r3
 8001e02:	2318      	movs	r3, #24
 8001e04:	001a      	movs	r2, r3
 8001e06:	2100      	movs	r1, #0
 8001e08:	f000 fd92 	bl	8002930 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SPI1);
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	015b      	lsls	r3, r3, #5
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff ffb3 	bl	8001d7c <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7ff ff98 	bl	8001d50 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001e20:	003b      	movs	r3, r7
 8001e22:	2220      	movs	r2, #32
 8001e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e26:	003b      	movs	r3, r7
 8001e28:	2202      	movs	r2, #2
 8001e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001e2c:	003b      	movs	r3, r7
 8001e2e:	2203      	movs	r2, #3
 8001e30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e32:	003b      	movs	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e38:	003b      	movs	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001e3e:	003b      	movs	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	003a      	movs	r2, r7
 8001e46:	2390      	movs	r3, #144	; 0x90
 8001e48:	05db      	lsls	r3, r3, #23
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 fb24 	bl	800249a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001e52:	003b      	movs	r3, r7
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e58:	003b      	movs	r3, r7
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001e5e:	003b      	movs	r3, r7
 8001e60:	2203      	movs	r2, #3
 8001e62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e64:	003b      	movs	r3, r7
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e6a:	003b      	movs	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001e70:	003b      	movs	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	003a      	movs	r2, r7
 8001e78:	2390      	movs	r3, #144	; 0x90
 8001e7a:	05db      	lsls	r3, r3, #23
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 fb0b 	bl	800249a <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, 0);
 8001e84:	2100      	movs	r1, #0
 8001e86:	2019      	movs	r0, #25
 8001e88:	f7ff fef4 	bl	8001c74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8001e8c:	2019      	movs	r0, #25
 8001e8e:	f7ff fed7 	bl	8001c40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e92:	0021      	movs	r1, r4
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2282      	movs	r2, #130	; 0x82
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	22e0      	movs	r2, #224	; 0xe0
 8001ea6:	00d2      	lsls	r2, r2, #3
 8001ea8:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	4a08      	ldr	r2, [pc, #32]	; (8001efc <MX_SPI1_Init+0x114>)
 8001eda:	0019      	movs	r1, r3
 8001edc:	0010      	movs	r0, r2
 8001ede:	f000 fc4b 	bl	8002778 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_SPI1_Init+0x114>)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff ff5e 	bl	8001da8 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <MX_SPI1_Init+0x114>)
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff ff6c 	bl	8001dcc <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b011      	add	sp, #68	; 0x44
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	40013000 	.word	0x40013000

08001f00 <NMI_Handler>:
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	msTicks++;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <SysTick_Handler+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <SysTick_Handler+0x14>)
 8001f2c:	601a      	str	r2, [r3, #0]
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002f4 	.word	0x200002f4

08001f38 <TIM6_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM6 global interrupt.
 */
void TIM6_IRQHandler(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_IRQn 0 */
	if (TIM6->SR & TIM_SR_UIF) {
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <TIM6_IRQHandler+0x24>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM6_IRQHandler+0x1e>
		/* Clear the interrupt even flag. CPU will only respond to new flags thereafter */
		TIM6->SR &= ~(TIM_SR_UIF);
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <TIM6_IRQHandler+0x24>)
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <TIM6_IRQHandler+0x24>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	438a      	bics	r2, r1
 8001f50:	611a      	str	r2, [r3, #16]
		LCD_refreshScr();
 8001f52:	f7ff fe49 	bl	8001be8 <LCD_refreshScr>
	}
	/* USER CODE END TIM6_IRQn 0 */
	/* USER CODE BEGIN TIM6_IRQn 1 */

	/* USER CODE END TIM6_IRQn 1 */
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40001000 	.word	0x40001000

08001f60 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */
	if (SPI1->SR & SPI_SR_TXE) {
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SPI1_IRQHandler+0x20>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d005      	beq.n	8001f7a <SPI1_IRQHandler+0x1a>
		/* Clear the interrupt even flag. CPU will only respond to new flags thereafter */
		SPI1->SR &= ~(SPI_SR_TXE);
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SPI1_IRQHandler+0x20>)
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <SPI1_IRQHandler+0x20>)
 8001f74:	2102      	movs	r1, #2
 8001f76:	438a      	bics	r2, r1
 8001f78:	609a      	str	r2, [r3, #8]
	}
	/* USER CODE END SPI1_IRQn 0 */
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40013000 	.word	0x40013000

08001f84 <Delay_ms>:

uint32_t Millis() {
	return msTicks;
}

void Delay_ms(uint32_t dlyTicks) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	uint32_t curTicks;

	curTicks = msTicks;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <Delay_ms+0x28>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
	while ((msTicks - curTicks) < dlyTicks)
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <Delay_ms+0x28>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d8f8      	bhi.n	8001f94 <Delay_ms+0x10>
		;
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200002f4 	.word	0x200002f4

08001fb0 <SystemInit>:

const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};

void SystemInit(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <__NVIC_EnableIRQ>:
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	1dfb      	adds	r3, r7, #7
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8001fce:	d809      	bhi.n	8001fe4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	401a      	ands	r2, r3
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_EnableIRQ+0x30>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4091      	lsls	r1, r2
 8001fe0:	000a      	movs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b7f      	cmp	r3, #127	; 0x7f
 8002004:	d828      	bhi.n	8002058 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002006:	4a2f      	ldr	r2, [pc, #188]	; (80020c4 <__NVIC_SetPriority+0xd4>)
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b25b      	sxtb	r3, r3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	33c0      	adds	r3, #192	; 0xc0
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	589b      	ldr	r3, [r3, r2]
 8002016:	1dfa      	adds	r2, r7, #7
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	0011      	movs	r1, r2
 800201c:	2203      	movs	r2, #3
 800201e:	400a      	ands	r2, r1
 8002020:	00d2      	lsls	r2, r2, #3
 8002022:	21ff      	movs	r1, #255	; 0xff
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	43d2      	mvns	r2, r2
 800202a:	401a      	ands	r2, r3
 800202c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	22ff      	movs	r2, #255	; 0xff
 8002034:	401a      	ands	r2, r3
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	2303      	movs	r3, #3
 800203e:	4003      	ands	r3, r0
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002044:	481f      	ldr	r0, [pc, #124]	; (80020c4 <__NVIC_SetPriority+0xd4>)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b25b      	sxtb	r3, r3
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	430a      	orrs	r2, r1
 8002050:	33c0      	adds	r3, #192	; 0xc0
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	501a      	str	r2, [r3, r0]
}
 8002056:	e031      	b.n	80020bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <__NVIC_SetPriority+0xd8>)
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	0019      	movs	r1, r3
 8002060:	230f      	movs	r3, #15
 8002062:	400b      	ands	r3, r1
 8002064:	3b08      	subs	r3, #8
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3306      	adds	r3, #6
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	18d3      	adds	r3, r2, r3
 800206e:	3304      	adds	r3, #4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	1dfa      	adds	r2, r7, #7
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	0011      	movs	r1, r2
 8002078:	2203      	movs	r2, #3
 800207a:	400a      	ands	r2, r1
 800207c:	00d2      	lsls	r2, r2, #3
 800207e:	21ff      	movs	r1, #255	; 0xff
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	43d2      	mvns	r2, r2
 8002086:	401a      	ands	r2, r3
 8002088:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	401a      	ands	r2, r3
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	0018      	movs	r0, r3
 8002098:	2303      	movs	r3, #3
 800209a:	4003      	ands	r3, r0
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <__NVIC_SetPriority+0xd8>)
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	001c      	movs	r4, r3
 80020a8:	230f      	movs	r3, #15
 80020aa:	4023      	ands	r3, r4
 80020ac:	3b08      	subs	r3, #8
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	430a      	orrs	r2, r1
 80020b2:	3306      	adds	r3, #6
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	18c3      	adds	r3, r0, r3
 80020b8:	3304      	adds	r3, #4
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b003      	add	sp, #12
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
//    NVIC_SetPriority(TIM6_IRQn, 0);
//      NVIC_EnableIRQ(TIM6_IRQn);
//    /* These are CMSIS calls to enable interrupts */

	 // Enable the TIM6 clock
	    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <MX_TIM6_Init+0x48>)
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_TIM6_Init+0x48>)
 80020d6:	2110      	movs	r1, #16
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]

	    // Configure the TIM6 prescaler and auto-reload value
	    TIM6->PSC = 48000000/479;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_TIM6_Init+0x4c>)
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <MX_TIM6_Init+0x50>)
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
	    TIM6->ARR = 25000-1;
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <MX_TIM6_Init+0x4c>)
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <MX_TIM6_Init+0x54>)
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c

	    // Enable the update event interrupt
	    TIM6->DIER |= TIM_DIER_UIE;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_TIM6_Init+0x4c>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <MX_TIM6_Init+0x4c>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]

	    // Enable the TIM6 interrupt in the NVIC
	    NVIC_EnableIRQ(TIM6_IRQn);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f7ff ff61 	bl	8001fbc <__NVIC_EnableIRQ>

	    // configure the priority of the interrupt
	    NVIC_SetPriority(TIM6_IRQn, 1);
 80020fa:	2101      	movs	r1, #1
 80020fc:	2011      	movs	r0, #17
 80020fe:	f7ff ff77 	bl	8001ff0 <__NVIC_SetPriority>

	    // Enable the timer
	    TIM6->CR1 |= TIM_CR1_CEN;
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <MX_TIM6_Init+0x4c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <MX_TIM6_Init+0x4c>)
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40001000 	.word	0x40001000
 800211c:	00018770 	.word	0x00018770
 8002120:	000061a7 	.word	0x000061a7

08002124 <INFO_MODE_refresh>:
	INFO_MODE_refresh();

}


void INFO_MODE_refresh(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	LCD_print_big("INFO", 19, 2);
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <INFO_MODE_refresh+0x18>)
 800212a:	2202      	movs	r2, #2
 800212c:	2113      	movs	r1, #19
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff fceb 	bl	8001b0a <LCD_print_big>


}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	08002a14 	.word	0x08002a14

08002140 <VIR_MODE_refresh>:

void VIR_MODE_refresh(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	LCD_print_big("VIR", 25, 2);
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <VIR_MODE_refresh+0x18>)
 8002146:	2202      	movs	r2, #2
 8002148:	2119      	movs	r1, #25
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff fcdd 	bl	8001b0a <LCD_print_big>


}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	08002a1c 	.word	0x08002a1c

0800215c <COM_MODE_refresh>:

void COM_MODE_refresh(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	LCD_print_big("COM", 25, 2);
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <COM_MODE_refresh+0x18>)
 8002162:	2202      	movs	r2, #2
 8002164:	2119      	movs	r1, #25
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff fccf 	bl	8001b0a <LCD_print_big>


}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	08002a20 	.word	0x08002a20

08002178 <PAR_MODE_refresh>:
/*
 * STOPWATCH
 * */


void PAR_MODE_refresh(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	/*LCD_print_big("00:00:00", 0, 27);*/

	LCD_print_big("PAR", 25, 2);
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <PAR_MODE_refresh+0x18>)
 800217e:	2202      	movs	r2, #2
 8002180:	2119      	movs	r1, #25
 8002182:	0018      	movs	r0, r3
 8002184:	f7ff fcc1 	bl	8001b0a <LCD_print_big>

}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	08002a24 	.word	0x08002a24

08002194 <TRAIN_MODE_refresh>:
/*
 * STOPWATCH
 * */


void TRAIN_MODE_refresh(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	LCD_print_big("TRAIN", 13, 2);
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <TRAIN_MODE_refresh+0x18>)
 800219a:	2202      	movs	r2, #2
 800219c:	210d      	movs	r1, #13
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff fcb3 	bl	8001b0a <LCD_print_big>


}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	08002a28 	.word	0x08002a28

080021b0 <TRAIN2_MODE_refresh>:

void TRAIN2_MODE_refresh(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	LCD_print_big("TRAIN2", 13, 2);
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <TRAIN2_MODE_refresh+0x18>)
 80021b6:	2202      	movs	r2, #2
 80021b8:	210d      	movs	r1, #13
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff fca5 	bl	8001b0a <LCD_print_big>


}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	08002a30 	.word	0x08002a30

080021cc <TRAIN2_MODE_callback>:

	//PAR_MODE_refresh();

}

void TRAIN2_MODE_callback(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
//	key_next_func = NULL;
//	key_prev_func = NULL;
//	key_enter_func = NULL;
    back_func = menu_back;
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <TRAIN2_MODE_callback+0x10>)
 80021d2:	4a03      	ldr	r2, [pc, #12]	; (80021e0 <TRAIN2_MODE_callback+0x14>)
 80021d4:	601a      	str	r2, [r3, #0]
//	key_start_func = NULL;
//	key_stop_func = NULL;

	//PAR_MODE_refresh();

}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200000b8 	.word	0x200000b8
 80021e0:	08001395 	.word	0x08001395

080021e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480d      	ldr	r0, [pc, #52]	; (8002220 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ea:	490e      	ldr	r1, [pc, #56]	; (8002224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ec:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <LoopForever+0xe>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002200:	4c0b      	ldr	r4, [pc, #44]	; (8002230 <LoopForever+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800220e:	f7ff fecf 	bl	8001fb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002212:	f000 fb4d 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002216:	f7fe ff3b 	bl	8001090 <main>

0800221a <LoopForever>:

LoopForever:
    b LoopForever
 800221a:	e7fe      	b.n	800221a <LoopForever>
  ldr   r0, =_estack
 800221c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002228:	0800316c 	.word	0x0800316c
  ldr r2, =_sbss
 800222c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002230:	200002f8 	.word	0x200002f8

08002234 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_IRQHandler>

08002236 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	3b01      	subs	r3, #1
 8002248:	425a      	negs	r2, r3
 800224a:	4153      	adcs	r3, r2
 800224c:	b2db      	uxtb	r3, r3
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002262:	230f      	movs	r3, #15
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff ffe2 	bl	8002236 <LL_ADC_IsEnabled>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d118      	bne.n	80022a8 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <LL_ADC_Init+0x68>)
 800227c:	401a      	ands	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4319      	orrs	r1, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	430b      	orrs	r3, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	089a      	lsrs	r2, r3, #2
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	e003      	b.n	80022b0 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80022a8:	230f      	movs	r3, #15
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80022b0:	230f      	movs	r3, #15
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	ffff3fc7 	.word	0xffff3fc7

080022c4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80022ce:	230f      	movs	r3, #15
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7ff ffac 	bl	8002236 <LL_ADC_IsEnabled>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d115      	bne.n	800230e <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <LL_ADC_REG_Init+0x60>)
 80022e8:	401a      	ands	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4319      	orrs	r1, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4319      	orrs	r1, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4319      	orrs	r1, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	430b      	orrs	r3, r1
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	e003      	b.n	8002316 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800230e:	230f      	movs	r3, #15
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002316:	230f      	movs	r3, #15
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	781b      	ldrb	r3, [r3, #0]
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	fffec23c 	.word	0xfffec23c

08002328 <LL_GPIO_SetPinMode>:
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	435b      	muls	r3, r3
 800233c:	001a      	movs	r2, r3
 800233e:	0013      	movs	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	189b      	adds	r3, r3, r2
 8002344:	43db      	mvns	r3, r3
 8002346:	400b      	ands	r3, r1
 8002348:	001a      	movs	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	435b      	muls	r3, r3
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	434b      	muls	r3, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}

08002360 <LL_GPIO_SetPinOutputType>:
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	43d2      	mvns	r2, r2
 8002374:	401a      	ands	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	434b      	muls	r3, r1
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	605a      	str	r2, [r3, #4]
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b004      	add	sp, #16
 8002388:	bd80      	pop	{r7, pc}

0800238a <LL_GPIO_SetPinSpeed>:
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	435b      	muls	r3, r3
 800239e:	001a      	movs	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	189b      	adds	r3, r3, r2
 80023a6:	43db      	mvns	r3, r3
 80023a8:	400b      	ands	r3, r1
 80023aa:	001a      	movs	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	435b      	muls	r3, r3
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	434b      	muls	r3, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <LL_GPIO_SetPinPull>:
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	435b      	muls	r3, r3
 80023d6:	001a      	movs	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	43db      	mvns	r3, r3
 80023e0:	400b      	ands	r3, r1
 80023e2:	001a      	movs	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	435b      	muls	r3, r3
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	434b      	muls	r3, r1
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	60da      	str	r2, [r3, #12]
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b004      	add	sp, #16
 80023f8:	bd80      	pop	{r7, pc}

080023fa <LL_GPIO_SetAFPin_0_7>:
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a19      	ldr	r1, [r3, #32]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	435b      	muls	r3, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4353      	muls	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	435a      	muls	r2, r3
 8002416:	0013      	movs	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	43db      	mvns	r3, r3
 800241e:	400b      	ands	r3, r1
 8002420:	001a      	movs	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	435b      	muls	r3, r3
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	434b      	muls	r3, r1
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	434b      	muls	r3, r1
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	434b      	muls	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	621a      	str	r2, [r3, #32]
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}

08002440 <LL_GPIO_SetAFPin_8_15>:
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	0a12      	lsrs	r2, r2, #8
 8002458:	4353      	muls	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	0a12      	lsrs	r2, r2, #8
 800245e:	4353      	muls	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	0a12      	lsrs	r2, r2, #8
 8002464:	435a      	muls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	43db      	mvns	r3, r3
 800246e:	400b      	ands	r3, r1
 8002470:	001a      	movs	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	0a09      	lsrs	r1, r1, #8
 800247a:	434b      	muls	r3, r1
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	0a09      	lsrs	r1, r1, #8
 8002480:	434b      	muls	r3, r1
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	0a09      	lsrs	r1, r1, #8
 8002486:	434b      	muls	r3, r1
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	434b      	muls	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024a8:	e048      	b.n	800253c <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4091      	lsls	r1, r2
 80024b4:	000a      	movs	r2, r1
 80024b6:	4013      	ands	r3, r2
 80024b8:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03a      	beq.n	8002536 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <LL_GPIO_Init+0x36>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d10e      	bne.n	80024ee <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff ff56 	bl	800238a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff ff39 	bl	8002360 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7ff ff63 	bl	80023c2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d111      	bne.n	8002528 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2bff      	cmp	r3, #255	; 0xff
 8002508:	d807      	bhi.n	800251a <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f7ff ff71 	bl	80023fa <LL_GPIO_SetAFPin_0_7>
 8002518:	e006      	b.n	8002528 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff ff8c 	bl	8002440 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fef9 	bl	8002328 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	40da      	lsrs	r2, r3
 8002544:	1e13      	subs	r3, r2, #0
 8002546:	d1b0      	bne.n	80024aa <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}

08002552 <LL_I2C_Enable>:
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <LL_I2C_Disable>:
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	4393      	bics	r3, r2
 800257e:	001a      	movs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <LL_I2C_ConfigFilters>:
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <LL_I2C_ConfigFilters+0x2c>)
 800259e:	401a      	ands	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0219      	lsls	r1, r3, #8
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	ffffe0ff 	.word	0xffffe0ff

080025bc <LL_I2C_SetOwnAddress1>:
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	0adb      	lsrs	r3, r3, #11
 80025ce:	02da      	lsls	r2, r3, #11
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <LL_I2C_EnableOwnAddress1>:
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0212      	lsls	r2, r2, #8
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <LL_I2C_DisableOwnAddress1>:
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a03      	ldr	r2, [pc, #12]	; (8002620 <LL_I2C_DisableOwnAddress1+0x1c>)
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	ffff7fff 	.word	0xffff7fff

08002624 <LL_I2C_SetTiming>:
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	611a      	str	r2, [r3, #16]
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <LL_I2C_SetMode>:
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <LL_I2C_SetMode+0x24>)
 800264c:	401a      	ands	r2, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b002      	add	sp, #8
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	ffcfffff 	.word	0xffcfffff

08002664 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <LL_I2C_AcknowledgeNextData+0x24>)
 8002674:	401a      	ands	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	605a      	str	r2, [r3, #4]
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	ffff7fff 	.word	0xffff7fff

0800268c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff ff68 	bl	800256e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff ff6f 	bl	800258c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0011      	movs	r1, r2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7ff ffb4 	bl	8002624 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff ff47 	bl	8002552 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff ff9c 	bl	8002604 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6919      	ldr	r1, [r3, #16]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff ff70 	bl	80025bc <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7ff ff7c 	bl	80025e4 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff ffa1 	bl	800263c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0011      	movs	r1, r2
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff ffae 	bl	8002664 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002708:	2300      	movs	r3, #0
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}

08002712 <LL_SPI_IsEnabled>:
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	4013      	ands	r3, r2
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d101      	bne.n	800272a <LL_SPI_IsEnabled+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_SPI_IsEnabled+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <LL_SPI_SetRxFIFOThreshold>:
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <LL_SPI_SetRxFIFOThreshold+0x24>)
 8002744:	401a      	ands	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	605a      	str	r2, [r3, #4]
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	ffffefff 	.word	0xffffefff

0800275c <LL_SPI_SetCRCPolynomial>:
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	001a      	movs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	611a      	str	r2, [r3, #16]
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002782:	230f      	movs	r3, #15
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff ffc0 	bl	8002712 <LL_SPI_IsEnabled>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d148      	bne.n	8002828 <LL_SPI_Init+0xb0>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a27      	ldr	r2, [pc, #156]	; (8002838 <LL_SPI_Init+0xc0>)
 800279c:	401a      	ands	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4319      	orrs	r1, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4319      	orrs	r1, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4319      	orrs	r1, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	4319      	orrs	r1, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	4319      	orrs	r1, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4319      	orrs	r1, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	430b      	orrs	r3, r1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <LL_SPI_Init+0xc4>)
 80027d8:	401a      	ands	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	0c1b      	lsrs	r3, r3, #16
 80027e4:	430b      	orrs	r3, r1
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d206      	bcs.n	8002806 <LL_SPI_Init+0x8e>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff ff97 	bl	8002734 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <LL_SPI_Init+0xa8>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0011      	movs	r1, r2
 800281a:	0018      	movs	r0, r3
 800281c:	f7ff ff9e 	bl	800275c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002820:	230f      	movs	r3, #15
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002828:	230f      	movs	r3, #15
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b004      	add	sp, #16
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	ffff0040 	.word	0xffff0040
 800283c:	fffff0fb 	.word	0xfffff0fb

08002840 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fd fc5b 	bl	8000108 <__udivsi3>
 8002852:	0003      	movs	r3, r0
 8002854:	001a      	movs	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <LL_InitTick+0x30>)
 8002858:	3a01      	subs	r2, #1
 800285a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <LL_InitTick+0x30>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <LL_InitTick+0x30>)
 8002864:	2205      	movs	r2, #5
 8002866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}
 8002870:	e000e010 	.word	0xe000e010

08002874 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800287c:	23fa      	movs	r3, #250	; 0xfa
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff ffdb 	bl	8002840 <LL_InitTick>
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <LL_SetSystemCoreClock+0x18>)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b002      	add	sp, #8
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	200000c8 	.word	0x200000c8

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2600      	movs	r6, #0
 80028b4:	4d0c      	ldr	r5, [pc, #48]	; (80028e8 <__libc_init_array+0x38>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	2600      	movs	r6, #0
 80028c2:	f000 f87d 	bl	80029c0 <_init>
 80028c6:	4d0a      	ldr	r5, [pc, #40]	; (80028f0 <__libc_init_array+0x40>)
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <__libc_init_array+0x44>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	00b3      	lsls	r3, r6, #2
 80028d6:	58eb      	ldr	r3, [r5, r3]
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	00b3      	lsls	r3, r6, #2
 80028e0:	58eb      	ldr	r3, [r5, r3]
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08003164 	.word	0x08003164
 80028ec:	08003164 	.word	0x08003164
 80028f0:	08003164 	.word	0x08003164
 80028f4:	08003168 	.word	0x08003168

080028f8 <__itoa>:
 80028f8:	1e93      	subs	r3, r2, #2
 80028fa:	b510      	push	{r4, lr}
 80028fc:	000c      	movs	r4, r1
 80028fe:	2b22      	cmp	r3, #34	; 0x22
 8002900:	d904      	bls.n	800290c <__itoa+0x14>
 8002902:	2300      	movs	r3, #0
 8002904:	001c      	movs	r4, r3
 8002906:	700b      	strb	r3, [r1, #0]
 8002908:	0020      	movs	r0, r4
 800290a:	bd10      	pop	{r4, pc}
 800290c:	2a0a      	cmp	r2, #10
 800290e:	d109      	bne.n	8002924 <__itoa+0x2c>
 8002910:	2800      	cmp	r0, #0
 8002912:	da07      	bge.n	8002924 <__itoa+0x2c>
 8002914:	232d      	movs	r3, #45	; 0x2d
 8002916:	700b      	strb	r3, [r1, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	4240      	negs	r0, r0
 800291c:	1861      	adds	r1, r4, r1
 800291e:	f000 f80f 	bl	8002940 <__utoa>
 8002922:	e7f1      	b.n	8002908 <__itoa+0x10>
 8002924:	2100      	movs	r1, #0
 8002926:	e7f9      	b.n	800291c <__itoa+0x24>

08002928 <itoa>:
 8002928:	b510      	push	{r4, lr}
 800292a:	f7ff ffe5 	bl	80028f8 <__itoa>
 800292e:	bd10      	pop	{r4, pc}

08002930 <memset>:
 8002930:	0003      	movs	r3, r0
 8002932:	1882      	adds	r2, r0, r2
 8002934:	4293      	cmp	r3, r2
 8002936:	d100      	bne.n	800293a <memset+0xa>
 8002938:	4770      	bx	lr
 800293a:	7019      	strb	r1, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	e7f9      	b.n	8002934 <memset+0x4>

08002940 <__utoa>:
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	000c      	movs	r4, r1
 8002944:	0016      	movs	r6, r2
 8002946:	b08d      	sub	sp, #52	; 0x34
 8002948:	2225      	movs	r2, #37	; 0x25
 800294a:	0007      	movs	r7, r0
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <__utoa+0x68>)
 800294e:	a802      	add	r0, sp, #8
 8002950:	f000 f82c 	bl	80029ac <memcpy>
 8002954:	1e62      	subs	r2, r4, #1
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	1eb3      	subs	r3, r6, #2
 800295a:	aa02      	add	r2, sp, #8
 800295c:	2500      	movs	r5, #0
 800295e:	9201      	str	r2, [sp, #4]
 8002960:	2b22      	cmp	r3, #34	; 0x22
 8002962:	d904      	bls.n	800296e <__utoa+0x2e>
 8002964:	7025      	strb	r5, [r4, #0]
 8002966:	002c      	movs	r4, r5
 8002968:	0020      	movs	r0, r4
 800296a:	b00d      	add	sp, #52	; 0x34
 800296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296e:	0038      	movs	r0, r7
 8002970:	0031      	movs	r1, r6
 8002972:	f7fd fc4f 	bl	8000214 <__aeabi_uidivmod>
 8002976:	000b      	movs	r3, r1
 8002978:	9a01      	ldr	r2, [sp, #4]
 800297a:	0029      	movs	r1, r5
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	9a00      	ldr	r2, [sp, #0]
 8002980:	3501      	adds	r5, #1
 8002982:	5553      	strb	r3, [r2, r5]
 8002984:	003b      	movs	r3, r7
 8002986:	0007      	movs	r7, r0
 8002988:	429e      	cmp	r6, r3
 800298a:	d9f0      	bls.n	800296e <__utoa+0x2e>
 800298c:	2300      	movs	r3, #0
 800298e:	0022      	movs	r2, r4
 8002990:	5563      	strb	r3, [r4, r5]
 8002992:	000b      	movs	r3, r1
 8002994:	1ac8      	subs	r0, r1, r3
 8002996:	4283      	cmp	r3, r0
 8002998:	dde6      	ble.n	8002968 <__utoa+0x28>
 800299a:	7810      	ldrb	r0, [r2, #0]
 800299c:	5ce5      	ldrb	r5, [r4, r3]
 800299e:	7015      	strb	r5, [r2, #0]
 80029a0:	54e0      	strb	r0, [r4, r3]
 80029a2:	3201      	adds	r2, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	e7f5      	b.n	8002994 <__utoa+0x54>
 80029a8:	0800313c 	.word	0x0800313c

080029ac <memcpy>:
 80029ac:	2300      	movs	r3, #0
 80029ae:	b510      	push	{r4, lr}
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d100      	bne.n	80029b6 <memcpy+0xa>
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	5ccc      	ldrb	r4, [r1, r3]
 80029b8:	54c4      	strb	r4, [r0, r3]
 80029ba:	3301      	adds	r3, #1
 80029bc:	e7f8      	b.n	80029b0 <memcpy+0x4>
	...

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
